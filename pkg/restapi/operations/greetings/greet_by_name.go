// Code generated by go-swagger; DO NOT EDIT.

package greetings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// GreetByNameHandlerFunc turns a function with the right signature into a greet by name handler
type GreetByNameHandlerFunc func(GreetByNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GreetByNameHandlerFunc) Handle(params GreetByNameParams) middleware.Responder {
	return fn(params)
}

// GreetByNameHandler interface for that can handle valid greet by name params
type GreetByNameHandler interface {
	Handle(GreetByNameParams) middleware.Responder
}

// NewGreetByName creates a new http.Handler for the greet by name operation
func NewGreetByName(ctx *middleware.Context, handler GreetByNameHandler) *GreetByName {
	return &GreetByName{Context: ctx, Handler: handler}
}

/*GreetByName swagger:route GET /greetings/{name} greetings greetByName

GreetByName greet by name API

*/
type GreetByName struct {
	Context *middleware.Context
	Handler GreetByNameHandler
}

func (o *GreetByName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGreetByNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GreetByNameBadRequestBody greet by name bad request body
// swagger:model GreetByNameBadRequestBody
type GreetByNameBadRequestBody struct {

	// An optional detailed description of the error
	// Min Length: 1
	Description string `json:"description,omitempty"`

	// A brief description of the error
	// Required: true
	// Min Length: 1
	Reason string `json:"reason"`
}

// Validate validates this greet by name bad request body
func (o *GreetByNameBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GreetByNameBadRequestBody) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MinLength("greetByNameBadRequest"+"."+"description", "body", string(o.Description), 1); err != nil {
		return err
	}

	return nil
}

func (o *GreetByNameBadRequestBody) validateReason(formats strfmt.Registry) error {

	if err := validate.RequiredString("greetByNameBadRequest"+"."+"reason", "body", string(o.Reason)); err != nil {
		return err
	}

	if err := validate.MinLength("greetByNameBadRequest"+"."+"reason", "body", string(o.Reason), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GreetByNameBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GreetByNameBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GreetByNameBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GreetByNameOKBody greet by name o k body
// swagger:model GreetByNameOKBody
type GreetByNameOKBody struct {

	// The greeting given to the user
	// Required: true
	// Min Length: 1
	Greeting string `json:"greeting"`
}

// Validate validates this greet by name o k body
func (o *GreetByNameOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGreeting(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GreetByNameOKBody) validateGreeting(formats strfmt.Registry) error {

	if err := validate.RequiredString("greetByNameOK"+"."+"greeting", "body", string(o.Greeting)); err != nil {
		return err
	}

	if err := validate.MinLength("greetByNameOK"+"."+"greeting", "body", string(o.Greeting), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GreetByNameOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GreetByNameOKBody) UnmarshalBinary(b []byte) error {
	var res GreetByNameOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
